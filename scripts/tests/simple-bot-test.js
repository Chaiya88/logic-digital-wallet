// Simple Bot Test - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    
    // Handle webhook
    if (url.pathname === '/webhook/telegram' && request.method === 'POST') {
      try {
        const update = await request.json();
        console.log('Received update:', JSON.stringify(update, null, 2));
        
        if (update.message && update.message.text === '/start') {
          const chatId = update.message.chat.id;
          const username = update.message.from.first_name || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
          
          // Create inline keyboard
          const keyboard = {
            inline_keyboard: [
              [
                { text: "üí∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô", callback_data: 'balance' },
                { text: "üí∏ ‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô", callback_data: 'send' }
              ],
              [
                { text: "üì• ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", callback_data: 'receive' },
                { text: "üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", callback_data: 'history' }
              ],
              [
                { text: "üè¶ ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô THB", callback_data: 'deposit_thb' },
                { text: "üíé ‡∏ñ‡∏≠‡∏ô USDT", callback_data: 'withdraw_usdt' }
              ],
              [
                { text: "‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", callback_data: 'settings' }
              ]
            ]
          };
          
          const welcomeMessage = `üöÄ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà DOGLC Wallet Bot!

üéâ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${username}!

‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á`;

          // Send message with keyboard
          const payload = {
            chat_id: chatId,
            text: welcomeMessage,
            parse_mode: 'HTML',
            reply_markup: keyboard
          };
          
          console.log('Sending message:', JSON.stringify(payload, null, 2));
          
          const response = await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
          
          const result = await response.json();
          console.log('Telegram response:', JSON.stringify(result, null, 2));
          
          if (!response.ok) {
            console.error('Telegram API error:', result);
            // Don't return error, just log it
            console.error('Failed to send message but continuing...');
          }
          
          return new Response('OK');
        }
        
        // Handle callback queries
        if (update.callback_query) {
          const callbackQuery = update.callback_query;
          const chatId = callbackQuery.message.chat.id;
          const data = callbackQuery.data;
          
          console.log('Callback query:', data);
          
          // Answer callback query
          await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ callback_query_id: callbackQuery.id })
          });
          
          let responseText = '';
          switch (data) {
            case 'deposit_thb':
              responseText = 'üè¶ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô THB\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏≤‡∏Å';
              break;
            case 'withdraw_usdt':
              responseText = 'üíé ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏≠‡∏ô USDT\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà USDT';
              break;
            case 'balance':
              responseText = 'üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\nTHB: 1,000.00\nUSDT: 50.00';
              break;
            default:
              responseText = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${data}`;
          }
          
          // Send response
          const payload = {
            chat_id: chatId,
            text: responseText,
            parse_mode: 'HTML'
          };
          
          const response = await fetch(`https://api.telegram.org/bot${env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
          
          return new Response('OK');
        }
        
        return new Response('OK');
      } catch (error) {
        console.error('Webhook error:', error);
        return new Response('Error', { status: 500 });
      }
    }
    
    return new Response('Simple Bot Test Ready');
  }
};
