// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
export default {
  async fetch(request, env) {
    if (request.method === 'POST') {
      try {
        const data = await request.json();
        const chatId = data.chat_id || '123456789'; // ‡πÉ‡∏™‡πà chat ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        
        const keyboard = {
          inline_keyboard: [
            [
              { text: "üí∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô", callback_data: 'balance' },
              { text: "üí∏ ‡∏™‡πà‡∏á‡πÄ‡∏á‡∏¥‡∏ô", callback_data: 'send' }
            ],
            [
              { text: "üì• ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô", callback_data: 'receive' },
              { text: "üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", callback_data: 'history' }
            ],
            [
              { text: "üè¶ ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô THB", callback_data: 'deposit_thb' },
              { text: "üíé ‡∏ñ‡∏≠‡∏ô USDT", callback_data: 'withdraw_usdt' }
            ],
            [
              { text: "‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", callback_data: 'settings' }
            ]
          ]
        };
        
        const payload = {
          chat_id: chatId,
          text: 'üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π\\n\\n‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!',
          parse_mode: 'HTML',
          reply_markup: keyboard
        };
        
        console.log('Sending to Telegram:', JSON.stringify(payload, null, 2));
        
        const response = await fetch(\https://api.telegram.org/bot\/sendMessage\, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        
        const result = await response.json();
        
        return new Response(JSON.stringify({
          success: response.ok,
          telegram_response: result
        }, null, 2), {
          headers: { 'Content-Type': 'application/json' }
        });
        
      } catch (error) {
        return new Response(JSON.stringify({
          error: error.message
        }), { status: 500 });
      }
    }
    
    return new Response('Direct message test worker ready');
  }
};
